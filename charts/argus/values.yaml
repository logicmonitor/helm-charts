## REQUIRED VALUES

# The LogicMonitor API key ID.
accessID: ""
# The LogicMonitor API key.
accessKey: ""
# The LogicMonitor account name.
account: ""
# A unique name given to the cluster's resource group.
clusterName: ""

## OPTIONAL VALUES

nameOverride: ""
fullnameOverride: ""
rbac:
  create: true
# Set Argus Log Level
logLevel: "info"

serviceAccount:
  create: true
collectorsetcontroller:
  address: collectorset-controller
image:
  repository: logicmonitor/argus
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
# The Http/s proxy
proxy:
  url: ""
  user: ""
  pass: ""
# The public etcd discovery token used to add etcd hosts to the cluster resource group.
etcdDiscoveryToken: ""

# It provides the simplest way to run Pod on particular Node(s) based on labels on the node.
nodeSelector: {}
# It allows you to constrain which nodes your pod is eligible to be scheduled on.
affinity: {}
# The priority class name for Pod priority. If this parameter is set then user must have PriorityClass resource created otherwise Pod will be rejected.
priorityClassName: ""
# Tolerations are applied to pods, and allow the pods to schedule onto nodes with matching taints.
tolerations: []

resources: {}
# Labels to apply on all objects created by Argus
labels: {}
# Annotations to apply on all objects created by Argus
annotations: {}
# Set flag to ignore ssl/tls validation
ignoreSSL: false

# appIntervals defines time intervals for periodic sync, periodic delete and in memory cache resync operations.
daemons:
  k8sBulkSync:
    interval: "30m"
  LMResourceSweeper:
    interval: "10m"
  LMCacheSync:
    interval: "1h"
lmlogs:
  k8sevent.enable: false
  k8spodlog.enable: false
lm:
  resource:
    scheduledDelete: "P0DT0H0M0S"
    monitoring:
      # list of resources to disable monitoring
      disable: []
    alerting:
      # only cluster scoped resources can be mentioned, to disable
      disable: []
  resourceGroup:
    clusterTreeParentID: 1
    # A parent group id that will hold all cluster resources under it. This is useful when Argus is installed with non-admin user's token.
    resourceContainerID: 1
    extraProps:
      cluster: []
      # - name: "abc"
      #   value: "xyz"
      nodes: []
      etcd: []
filters: []

# openmetrics config for Argus metrics collection
openmetrics:
  port: 2112

collector:
  ## REQUIRED VALUES

  # The number of collectors to create and use with Argus.
  replicas: 1
  version: 0
  size: "small"
  useEA: false
  # The collector size to install. Can be nano, small, medium, or large.
  lm:
    groupID: 0
    escalationChainID: 0
  # The image repository of the [Collector](https://hub.docker.com/r/logicmonitor/collector) container.
  image:
    repository: logicmonitor/collector
    tag: latest
    pullPolicy: Always
  ## OPTIONAL VALUES

  # On a collector downloading event, either download the latest EA version or the latest GD version.

  # The Http/s proxy url of the collectors.
  proxy:
    url: ""
    user: ""
    pass: ""
  # annotations to add on collector statefulset
  annotations: {}
  # labels to add on collector statefulset
  labels: {}
  # Collector statefulset template
  statefulsetspec:
    template:
      spec:
        nodeSelector: {}
        # Tolerations are applied to pods, and allow the pods to schedule onto nodes with matching taints.
        tolerations: []
        # The priority class name for Pod priority of the collector. If this parameter is set then user must have PriorityClass resource created otherwise Pod will be rejected.
        priorityClassName: ""

# Replicas - defaults to 1, param is just for development purpose, do not increase more than one replicas in production
replicas: 1

# Kube state metrics configuration
# For further customizing KSM configuration, pls refer https://artifacthub.io/packages/helm/prometheus-community/kube-state-metrics/?modal=values
kube-state-metrics:
  # Set enabled to false in case you want to use a custom configured KSM
  enabled: true
  # No. of KSM Replicas to be configured
  replicas: 1
  collectors:
    - daemonsets
    - replicasets
    - statefulsets
    - persistentvolumes
