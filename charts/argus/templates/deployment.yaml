apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "argus.fullname" . }}
  namespace: {{ include "argus.namespace" . }}
  labels:
    {{ include "argus.labels" . | nindent 4 }}
  annotations:
    {{ include "argus.annotations" . | nindent 4 }}
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{ include "argus.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{ include "argus.labels" . | nindent 8 }}
      annotations:
        {{ include "argus.annotations" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "argus.serviceAccountName" . }}
    {{ if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | nindent 8 }}
    {{ end }}
    {{ if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | nindent 8 }}
    {{ end }}
    {{ if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
    {{ end }}
    {{ with .Values.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 }}
    {{ end }}
      containers:
        - name: argus
          {{- if or .Values.image.registry }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{ else if .Values.global.image.registry }}
          image: "{{ .Values.global.image.registry}}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{ else }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{ end }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default (.Values.global.image.pullPolicy | default "Always") }}
          {{ with .Values.resources }}
          resources:
            {{ toYaml . | nindent 12 }}
          {{ end }}
          args:
            - watch
          {{ if .Values.probe.enabled }}
          startupProbe:
            httpGet:
              path: /healthz
              port: 8080
            failureThreshold: {{ .Values.probe.startup.failureThreshold }}
            periodSeconds: {{ .Values.probe.startup.periodSeconds }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            failureThreshold: {{ .Values.probe.liveness.failureThreshold }}
            periodSeconds: {{ .Values.probe.liveness.periodSeconds }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            failureThreshold: {{ .Values.probe.readiness.failureThreshold }}
            periodSeconds: {{ .Values.probe.readiness.periodSeconds }}
          {{ end }}
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: APP_KUBERNETES_IO_NAME
              value: {{ include "argus.name" . }}
            - name: APP_KUBERNETES_IO_INSTANCE
              value: {{ .Release.Name }}
            - name: ACCESS_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "argus.fullname" . }}
                  key: accessID
            - name: ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "argus.fullname" . }}
                  key: accessKey
            - name: ACCOUNT
              valueFrom:
                secretKeyRef:
                  name: {{ include "argus.fullname" . }}
                  key: account
            - name: ETCD_DISCOVERY_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "argus.fullname" . }}
                  key: etcdDiscoveryToken
        {{- if .Values.proxy.user }}
            - name: PROXY_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "argus.fullname" . }}
                  key: proxyUser
        {{- end }}
        {{- if .Values.proxy.pass }}
            - name: PROXY_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "argus.fullname" . }}
                  key: proxyPass
        {{- end }}
